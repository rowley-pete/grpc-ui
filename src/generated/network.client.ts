// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "network.proto" (package "network", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { NetworkService } from "./network";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ConnectedNetwork } from "./network";
import type { Empty } from "./google/protobuf/empty";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service network.NetworkService
 */
export interface INetworkServiceClient {
    /**
     * @generated from protobuf rpc: SubscribeNetwork(google.protobuf.Empty) returns (stream network.ConnectedNetwork);
     */
    subscribeNetwork(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, ConnectedNetwork>;
    /**
     * @generated from protobuf rpc: PushNetworkInterface(network.ConnectedNetwork) returns (google.protobuf.Empty);
     */
    pushNetworkInterface(input: ConnectedNetwork, options?: RpcOptions): UnaryCall<ConnectedNetwork, Empty>;
}
/**
 * @generated from protobuf service network.NetworkService
 */
export class NetworkServiceClient implements INetworkServiceClient, ServiceInfo {
    typeName = NetworkService.typeName;
    methods = NetworkService.methods;
    options = NetworkService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: SubscribeNetwork(google.protobuf.Empty) returns (stream network.ConnectedNetwork);
     */
    subscribeNetwork(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, ConnectedNetwork> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, ConnectedNetwork>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: PushNetworkInterface(network.ConnectedNetwork) returns (google.protobuf.Empty);
     */
    pushNetworkInterface(input: ConnectedNetwork, options?: RpcOptions): UnaryCall<ConnectedNetwork, Empty> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ConnectedNetwork, Empty>("unary", this._transport, method, opt, input);
    }
}
